
package com.example;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.IntStream;
import java.util.concurrent.locks.ReentrantLock;

public class SynchronizedMethodTest {


	public static void main(String[] args) {
		System.out.println("Main started");
		Counter c = new Counter();

	        Thread t1 = new Thread(() -> { 
			for(int i = 0; i < 1000; i++) c.increment();
		});
		Thread t2 = new Thread(() -> {
				for(int i = 0; i < 1000; i++) c.increment();
		});


		t1.start();
		t2.start();
		try {
		t1.join();
		t2.join();
		}
		catch(InterruptedException e ) { }
		System.out.println("count result: " + c.getCount());
		System.out.println("Main finished, rct.count.................. ");
	}
}

class Counter {
	private int count = 0;
	ReentrantLock lock = new ReentrantLock();
	public synchronized void increment() 
			{
		count +=1;		
	}
	public int getCount() {
		return count;
	}
}
